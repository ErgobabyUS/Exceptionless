apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "exceptionless.fullname" . }}-api
  labels:
    app: {{ template "exceptionless.name" . }}
    component: {{ template "exceptionless.fullname" . }}-api
    tier: {{ template "exceptionless.fullname" . }}-api
    chart: {{ template "exceptionless.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ if not (kindIs "invalid" ( .Values.api | default dict ).replicaCount) }}{{ .Values.api.replicaCount }}{{ else }}{{ 2 }}{{ end }}
  selector:
    matchLabels:
      component: {{ template "exceptionless.fullname" . }}-api
  template:
    metadata:
      labels:
        app: {{ template "exceptionless.name" . }}
        component: {{ template "exceptionless.fullname" . }}-api
        tier: {{ template "exceptionless.fullname" . }}-api
        chart: {{ template "exceptionless.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      containers:
        - name: {{ template "exceptionless.name" . }}-api
          image: "{{ .Values.api.image.repository }}:{{ .Values.version }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            requests:
              memory: 400Mi
              cpu: 300m
            limits:
              memory: 2500Mi
              cpu: 800m
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ template "exceptionless.fullname" . }}-config
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: K8S_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: EX_OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: EX_OTEL_EXPORTER_OTLP_ENDPOINT
              value: $(HOST_IP):4317
            - name: EX_OTEL_RESOURCE_ATTRIBUTES
              value: k8s.pod.ip=$(K8S_POD_IP),k8s.pod.uid=$(K8S_POD_UID)
            - name: RunJobsInProcess
              value: 'false'
            - name: EnableWebSockets
              value: 'false'
{{- if (empty .Values.storage.connectionString) }}
          volumeMounts:
            - mountPath: "/app/storage"
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: {{ template "exceptionless.fullname" . }}-storage
{{- end }}

{{- if not (kindIs "invalid" ( .Values.api | default dict ).maxReplicaCount) }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ template "exceptionless.fullname" . }}-api-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ template "exceptionless.fullname" . }}-api
  minReplicas: {{ if not (kindIs "invalid" ( .Values.api | default dict ).minReplicaCount) }}{{ .Values.api.minReplicaCount }}{{ else }}{{ 2 }}{{ end }}
  maxReplicas: {{ .Values.api.maxReplicaCount }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "exceptionless.fullname" . }}-api
  labels:
    app: {{ template "exceptionless.name" . }}
    component: {{ template "exceptionless.fullname" . }}-api
    chart: {{ template "exceptionless.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    component: {{ template "exceptionless.fullname" . }}-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ template "exceptionless.fullname" . }}-api-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type,Authorization,ETag,Link,v,X-Requested-With,X-Exceptionless-Client,X-Result-Count,X-RateLimit-Limit,X-RateLimit-Remaining,X-Exceptionless-ConfigVersion"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    {{- range .Values.api.domains }}
    - {{ . }}
    {{- end }}
    secretName: {{ template "exceptionless.fullname" . }}-api-tls
  rules:
  {{- range .Values.api.domains }}
  - host: {{ . }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ template "exceptionless.fullname" $ }}-api
            port:
              number: 80
  {{- end }}
